{
	"csm": {
		"nodes": {
			"5": {
				"typename": {
					"type": "string",
					"value": "ModelTransformationDesignPatternIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						118,
						229
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"38": {
								"textContent": {
									"type": "string",
									"value": "Top-down\nPhased Construction\n(src,trgt)"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										34,
										6
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/ModelTransformationDesignPattern/5.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/ModelTransformationDesignPatternIcon"
			},
			"6": {
				"typename": {
					"type": "string",
					"value": "StartIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						127,
						323
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"1": {
								"r": {
									"type": "double",
									"value": 15
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Start/6.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/StartIcon"
			},
			"7": {
				"typename": {
					"type": "string",
					"value": "RuleIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						236,
						124
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1.356502291850124,
						1.789473684210526
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 350
								},
								"height": {
									"type": "double",
									"value": 200
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										42,
										32
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"11": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"": ""
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										35,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"24": {
								"textContent": {
									"type": "string",
									"value": "formerPhase"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15)\n     ({'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse\n     ({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										45,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"25": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										47.22265625,
										37
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"29": {
								"src": {
									"type": "string",
									"value": "/Formalisms/DelTa/icons/isExhaustive.svg"
								},
								"width": {
									"type": "double",
									"value": 0
								},
								"height": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('isExhaustive')!=0)\n     ({'width':40,'height':40})\nelse\n     ({'width':0,'height':0})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "11",
								"dest": "25"
							},
							{
								"src": "25",
								"dest": "24"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Rule/7.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon"
			},
			"8": {
				"typename": {
					"type": "string",
					"value": "RuleIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						818,
						147
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1.3368421052631578,
						1.6617825727754285
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 350
								},
								"height": {
									"type": "double",
									"value": 200
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										42,
										32
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"11": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"": ""
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										35,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"24": {
								"textContent": {
									"type": "string",
									"value": "latterPhase"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15)\n     ({'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse\n     ({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										45,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"25": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										47.22265625,
										37
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"29": {
								"src": {
									"type": "string",
									"value": "/Formalisms/DelTa/icons/isExhaustive.svg"
								},
								"width": {
									"type": "double",
									"value": 0
								},
								"height": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('isExhaustive')!=0)\n     ({'width':40,'height':40})\nelse\n     ({'width':0,'height':0})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "11",
								"dest": "25"
							},
							{
								"src": "25",
								"dest": "24"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Rule/8.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon"
			},
			"52": {
				"typename": {
					"type": "string",
					"value": "EndIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1415,
						331
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"r": {
									"type": "double",
									"value": 17
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"5": {
								"r": {
									"type": "double",
									"value": 15
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										6
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/End/52.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EndIcon"
			},
			"54": {
				"typename": {
					"type": "string",
					"value": "EntityIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						315,
						275
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"41": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 75
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"42": {
								"segments": {
									"type": "string",
									"value": "m0,0l57,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										100,
										29.714299999999753
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"47": {
								"segments": {
									"type": "string",
									"value": "m-10,-10l25,25"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										86,
										15.142799999999852
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"49": {
								"textContent": {
									"type": "string",
									"value": "src"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "end",
										"font-size": "15px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('mm').length>10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										152,
										10.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"53": {
								"textContent": {
									"type": "string",
									"value": "sSuper"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										83,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"65": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										9.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"66": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.5,
										27.392849999999896
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "41",
								"dest": "66"
							},
							{
								"src": "66",
								"dest": "65"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Entity/54.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon"
			},
			"55": {
				"typename": {
					"type": "string",
					"value": "EntityIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						592,
						280
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"41": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 75
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "gray",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"42": {
								"segments": {
									"type": "string",
									"value": "m0,0l57,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										100,
										29.714299999999753
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"47": {
								"segments": {
									"type": "string",
									"value": "m-10,-10l25,25"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										86,
										15.142799999999852
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"49": {
								"textContent": {
									"type": "string",
									"value": "trgt"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "end",
										"font-size": "15px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('mm').length>10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										152,
										10.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"53": {
								"textContent": {
									"type": "string",
									"value": "tSuper"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										83,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"65": {
								"textContent": {
									"type": "string",
									"value": "n0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "15px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										9.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"66": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.5,
										27.392849999999896
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "41",
								"dest": "66"
							},
							{
								"src": "66",
								"dest": "65"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Entity/55.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon"
			},
			"56": {
				"typename": {
					"type": "string",
					"value": "TraceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						523,
						312
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"69": {
								"width": {
									"type": "double",
									"value": 20
								},
								"height": {
									"type": "double",
									"value": 20
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "gray",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"78": {
								"textContent": {
									"type": "string",
									"value": "n0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "15px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										6.2856999999997925
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"79": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										11.609993481481524,
										10.500700608473949
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "69",
								"dest": "79"
							},
							{
								"src": "79",
								"dest": "78"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Trace/56.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon"
			},
			"57": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": ". ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "trSourceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						500,
						327
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"288": {
								"segments": {
									"type": "string",
									"value": "m0,0 l-10,4 l10,4 l-3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;30.000000000000227,0%",
										"0;4,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;180"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": -1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/trSource/57.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/56.instance--/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink/57.instance": "M530.0000000000002,327L500,327",
						"/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink/57.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/54.instance": "M499.92271194040313,327L470.0004994444446,327"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink"
			},
			"58": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": ". ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "trTargetLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						572.6499992880028,
						327.5028301752453
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;26.424893654049015,99.98220482235222%",
										"0;-3.5021290346628007,1.8864566947608907%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;1.0809241866604182"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/trTarget/58.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/56.instance--/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink/58.instance": "M546,327L572.6499992880028,327.50283017524544",
						"/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink/58.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/55.instance": "M572.5747168931362,327.50140975270074L598.9994346742615,327.9999893334766"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink"
			},
			"59": {
				"typename": {
					"type": "string",
					"value": "EntityIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						314,
						421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"41": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 75
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"42": {
								"segments": {
									"type": "string",
									"value": "m0,0l57,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										100,
										29.714299999999753
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"47": {
								"segments": {
									"type": "string",
									"value": "m-10,-10l25,25"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										86,
										15.142799999999852
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"49": {
								"textContent": {
									"type": "string",
									"value": "src"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "end",
										"font-size": "15px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('mm').length>10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										152,
										10.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"53": {
								"textContent": {
									"type": "string",
									"value": "sSub"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										83,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"65": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										9.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"66": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.5,
										27.392849999999896
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "41",
								"dest": "66"
							},
							{
								"src": "66",
								"dest": "65"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Entity/59.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon"
			},
			"60": {
				"typename": {
					"type": "string",
					"value": "RelationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						370,
						377
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"74": {
								"width": {
									"type": "double",
									"value": 20
								},
								"height": {
									"type": "double",
									"value": 20
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"80": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										6.2856999999997925
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Relation/60.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon"
			},
			"61": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "relSourceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						385,
						368
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"288": {
								"segments": {
									"type": "string",
									"value": "m0,0 l-10,4 l10,4 l-3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-2.989834799322921,0%",
										"0;14.284988199951613,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-94.08561677997442"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": -1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/relSource/61.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/60.instance--/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink/61.instance": "M386,382L385.0000000000001,368",
						"/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink/61.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/54.instance": "M385.0000000000001,368L384.0000000000001,354"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink"
			},
			"62": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "relTargetLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						384.49500007407414,
						415.1499977777778
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;3.5028128131016842,-3.331483023264554%",
										"0;14.982263765374853,99.94449069791541%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;91.90915243299678"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/relTarget/62.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/60.instance--/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink/62.instance": "M385.0000000000001,400L384.49500007407414,415.1499977777778",
						"/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink/62.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/59.instance": "M384.49751667574196,415.0744997277409L384.0000332592592,429.9990022222221"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink"
			},
			"64": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						310.8721226315789,
						228.1949061249615
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/64.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/7.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/64.instance": "M249.24424526315786,129.88981224992304L310.8721226315789,228.1949061249616",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/64.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/54.instance": "M310.95167643401834,228.32180557941084L393.4997253606166,314.499561911727"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"65": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						447.7561617288432,
						229.76234199464045
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/65.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/7.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/65.instance": "M249.24424526315786,129.88981224992304L447.75616172884315,229.76234199464048",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/65.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/55.instance": "M447.6889610496925,229.72853293195627L666.9994568429931,317.4997267344687"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"66": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						380.7408375666477,
						232.03712457212703
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/66.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/7.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/66.instance": "M249.24424526315786,129.88981224992304L380.7408375666477,232.03712457212706",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/66.instance--/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/56.instance": "M380.68126555942854,231.99084869287825L532.9993567524641,321.99950032159927"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"67": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						310.3721226315789,
						301.1949061249615
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/67.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/7.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/67.instance": "M249.24424526315786,129.88981224992304L310.3721226315789,301.19490612496156",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/67.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/59.instance": "M310.3972985820788,301.26545934469436L392.499749631044,460.4992983646845"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"68": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						305.679847411728,
						265.58369971488145
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/68.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/7.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/68.instance": "M249.24424526315786,129.88981224992304L305.679847411728,265.5836997148815",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/68.instance--/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/60.instance": "M305.65086681726996,265.5140187090385L382.99964561878585,388.99914792501966"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"69": {
				"typename": {
					"type": "string",
					"value": "EntityIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						889,
						286
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"41": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 75
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"42": {
								"segments": {
									"type": "string",
									"value": "m0,0l57,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										100,
										29.714299999999753
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"47": {
								"segments": {
									"type": "string",
									"value": "m-10,-10l25,25"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										86,
										15.142799999999852
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"49": {
								"textContent": {
									"type": "string",
									"value": "src"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "end",
										"font-size": "15px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('mm').length>10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										152,
										10.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"53": {
								"textContent": {
									"type": "string",
									"value": "sSuper"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										83,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"65": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										9.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"66": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.5,
										27.392849999999896
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "41",
								"dest": "66"
							},
							{
								"src": "66",
								"dest": "65"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Entity/69.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon"
			},
			"70": {
				"typename": {
					"type": "string",
					"value": "EntityIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1166,
						291
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"41": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 75
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"42": {
								"segments": {
									"type": "string",
									"value": "m0,0l57,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										100,
										29.714299999999753
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"47": {
								"segments": {
									"type": "string",
									"value": "m-10,-10l25,25"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										86,
										15.142799999999852
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"49": {
								"textContent": {
									"type": "string",
									"value": "trgt"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "end",
										"font-size": "15px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('mm').length>10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										152,
										10.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"53": {
								"textContent": {
									"type": "string",
									"value": "tSuper"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										83,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"65": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										9.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"66": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.5,
										27.392849999999896
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "41",
								"dest": "66"
							},
							{
								"src": "66",
								"dest": "65"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Entity/70.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon"
			},
			"71": {
				"typename": {
					"type": "string",
					"value": "TraceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1097,
						323
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"69": {
								"width": {
									"type": "double",
									"value": 20
								},
								"height": {
									"type": "double",
									"value": 20
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"78": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										6.2856999999997925
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"79": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										11.609993481481524,
										10.500700608473949
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "69",
								"dest": "79"
							},
							{
								"src": "79",
								"dest": "78"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Trace/71.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon"
			},
			"72": {
				"typename": {
					"type": "string",
					"value": "EntityIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						888,
						432
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"41": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 75
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"42": {
								"segments": {
									"type": "string",
									"value": "m0,0l57,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										100,
										29.714299999999753
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"47": {
								"segments": {
									"type": "string",
									"value": "m-10,-10l25,25"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										86,
										15.142799999999852
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"49": {
								"textContent": {
									"type": "string",
									"value": "src"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "end",
										"font-size": "15px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('mm').length>10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										152,
										10.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"53": {
								"textContent": {
									"type": "string",
									"value": "sSub"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										83,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"65": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										9.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"66": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.5,
										27.392849999999896
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "41",
								"dest": "66"
							},
							{
								"src": "66",
								"dest": "65"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Entity/72.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon"
			},
			"73": {
				"typename": {
					"type": "string",
					"value": "RelationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						944,
						388
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"74": {
								"width": {
									"type": "double",
									"value": 20
								},
								"height": {
									"type": "double",
									"value": 20
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"80": {
								"textContent": {
									"type": "string",
									"value": "n-1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "0px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										6.2856999999997925
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Relation/73.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon"
			},
			"74": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "relTargetLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						958.4950000740741,
						426.1499977777778
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;3.502812813101741,-3.331483023264554%",
										"0;14.982263765374853,99.94449069791541%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;91.90915243299678"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/relTarget/74.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/73.instance--/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink/74.instance": "M959,411L958.4950000740741,426.1499977777778",
						"/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink/74.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/72.instance": "M958.497516675742,426.0744997277409L958.0000332592592,440.9990022222221"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink"
			},
			"75": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "relSourceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						959,
						379
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"288": {
								"segments": {
									"type": "string",
									"value": "m0,0 l-10,4 l10,4 l-3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-2.989834799322921,0%",
										"0;14.284988199951613,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-94.08561677997488"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": -1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/relSource/75.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/73.instance--/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink/75.instance": "M960,393L959,379",
						"/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink/75.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/69.instance": "M959,379L958.0000000000002,365"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink"
			},
			"76": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": ". ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "trTargetLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1146.6499992880028,
						338.5028301752453
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;26.42489365404913,99.98220482235222%",
										"0;-3.5021290346628007,1.886456694760907%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;1.0809241866604276"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/trTarget/76.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/71.instance--/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink/76.instance": "M1120,338L1146.649999288003,338.50283017524544",
						"/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink/76.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/70.instance": "M1146.5747168931362,338.50140975270074L1172.9994346742615,338.9999893334766"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink"
			},
			"77": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": ". ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "trSourceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1074,
						338
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"288": {
								"segments": {
									"type": "string",
									"value": "m0,0 l-10,4 l10,4 l-3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;30,0%",
										"0;4,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;180"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": -1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/trSource/77.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/71.instance--/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink/77.instance": "M1104,338L1074,338",
						"/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink/77.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/69.instance": "M1073.9227119404031,338L1044.0004994444448,338"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink"
			},
			"78": {
				"typename": {
					"type": "string",
					"value": "EntityIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1172,
						434
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"41": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 75
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "gray",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"42": {
								"segments": {
									"type": "string",
									"value": "m0,0l57,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										100,
										29.714299999999753
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"47": {
								"segments": {
									"type": "string",
									"value": "m-10,-10l25,25"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										86,
										15.142799999999852
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"49": {
								"textContent": {
									"type": "string",
									"value": "trgt"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "end",
										"font-size": "15px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('mm').length>10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										152,
										10.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"53": {
								"textContent": {
									"type": "string",
									"value": "tSub"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "middle",
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('name').length>15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('exists')==0)\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('exists')==1)\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										83,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"65": {
								"textContent": {
									"type": "string",
									"value": "n0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "15px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										9.285699999999792
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"66": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.5,
										27.392849999999896
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "41",
								"dest": "66"
							},
							{
								"src": "66",
								"dest": "65"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Entity/78.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon"
			},
			"79": {
				"typename": {
					"type": "string",
					"value": "TraceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1099,
						461
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"69": {
								"width": {
									"type": "double",
									"value": 20
								},
								"height": {
									"type": "double",
									"value": 20
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "gray",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"78": {
								"textContent": {
									"type": "string",
									"value": "n0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "15px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										6.2856999999997925
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"79": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										11.609993481481524,
										10.500700608473949
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "69",
								"dest": "79"
							},
							{
								"src": "79",
								"dest": "78"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Trace/79.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon"
			},
			"80": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": ". ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "trSourceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1074,
						476
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"288": {
								"segments": {
									"type": "string",
									"value": "m0,0 l-10,4 l10,4 l-3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;32,0%",
										"0;4,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;180"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": -1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/trSource/80.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/79.instance--/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink/80.instance": "M1106,476L1074,476",
						"/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink/80.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/72.instance": "M1073.9228572092748,476.0000000000001L1042.0004682617187,476"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/trSourceLink"
			},
			"81": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": ". ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "trTargetLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1151.649999338843,
						476.50272726070625
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;27.422171122439067,99.98347517133229%",
										"0;-3.502076172893851,1.817881366751511%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;1.0416266760099828"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/trTarget/81.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/79.instance--/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink/81.instance": "M1124,476L1151.649999338843,476.50272726070625",
						"/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink/81.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/78.instance": "M1151.5747271909809,476.50135867619963L1178.9994552066119,476.9999900946657"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/trTargetLink"
			},
			"82": {
				"typename": {
					"type": "string",
					"value": "RelationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1232,
						394
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"74": {
								"width": {
									"type": "double",
									"value": 20
								},
								"height": {
									"type": "double",
									"value": 20
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "gray",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('exists')==0)\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Constraint')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Action')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"80": {
								"textContent": {
									"type": "string",
									"value": "n0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.75,
										"text-anchor": "start",
										"font-size": "15px",
										"font-style": "italic",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==1)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('exists')==0)\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										6.2856999999997925
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/Relation/82.instance"
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon"
			},
			"83": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "relSourceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1247,
						384.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"288": {
								"segments": {
									"type": "string",
									"value": "m0,0 l-10,4 l10,4 l-3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-4,0%",
										"0;15.5,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-90"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": -1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/relSource/83.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/82.instance--/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink/83.instance": "M1247,400L1247,384.5",
						"/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink/83.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/70.instance": "M1247,384.4205003098376L1247,369.00096566077"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/relSourceLink"
			},
			"84": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "relTargetLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1249.989655336422,
						428.6499976218787
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;3.0008659772699957,-6.880209161536413%",
										"0;14.625210744582773,99.7630328422984%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;93.94518622903676"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/relTarget/84.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/82.instance--/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink/84.instance": "M1251,414L1249.989655336422,428.6499976218788",
						"/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink/84.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/78.instance": "M1249.989655336422,428.6499976218788L1249,443"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/relTargetLink"
			},
			"85": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						896.3498743382324,
						227.9193894998038
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/85.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/85.instance": "M830,153.1135734072022L896.3498743382324,227.91938949980388",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/85.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/69.instance": "M896.3496735859287,227.91916316267705L967.4995987640025,325.49954762858965"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"86": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1034.75,
						230.30678670360112
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/86.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/86.instance": "M830,153.1135734072022L1034.75,230.30678670360115",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/86.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/70.instance": "M1034.8200873297114,230.33321047010557L1244.4994212966599,330.4997818218785"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"87": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						967.6301261656995,
						232.63196954532555
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/87.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/87.instance": "M830,153.1135734072022L967.6301261656995,232.63196954532557",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/87.instance--/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/71.instance": "M967.5648167937343,232.59423582629088L1109.9992615793312,334.9995733635586"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"88": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						895.75,
						300.8067867036011
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/88.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/88.instance": "M830,153.1135734072022L895.75,300.8067867036011",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/88.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/72.instance": "M895.7804206155465,300.8751200642173L966.4996598930741,471.49923602304557"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"89": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						891.0720472292046,
						265.18900306993345
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/89.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/89.instance": "M830,153.1135734072022L891.0720472292046,265.1890030699335",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/89.instance--/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/73.instance": "M891.071933769048,265.1887948552692L956.9997731986646,399.9995837890119"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"90": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1036,
						300.8067867036011
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/90.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/90.instance": "M830,153.1135734072022L1036,300.8067867036011",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/90.instance--/Formalisms/DelTa/DelTa.defaultIcons/EntityIcon/78.instance": "M1036.121844734268,300.89414418091815L1246.9992280156748,471.4994465201671"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"91": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						967.1022387975348,
						300.6668189432515
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/91.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/91.instance": "M830,153.1135734072022L967.1022387975349,300.66681894325154",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/91.instance--/Formalisms/DelTa/DelTa.defaultIcons/TraceIcon/79.instance": "M967.0509668067075,300.6116385996039L1108.9995424420558,470.9995075634047"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"92": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "operatesOnLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033.5,
						267.0567867036011
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/operatesOn/92.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/92.instance": "M830,153.1135734072022L1033.5,267.0567867036011",
						"/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink/92.instance--/Formalisms/DelTa/DelTa.defaultIcons/RelationIcon/82.instance": "M1033.565335610268,267.09336925582033L1241.9994941754462,403.9997167799751"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/operatesOnLink"
			},
			"93": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "sequenceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						225,
						343.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;68.08733234677888,99.97567929055653%",
										"0;-2.499046616208034,2.2053458667035217%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;1.2636725516583076"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/sequence/93.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/StartIcon/6.instance--/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink/93.instance": "M157,342L225,343.5",
						"/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink/93.instance--/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/7.instance": "M225.14955871634925,343.5032990893312L292.9991185121107,344.99998055541425"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink"
			},
			"94": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "sequenceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						820.5,
						346.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;54.46302923554117,99.99579186567449%",
										"0;-4.499829151131337,-0.9173925859235472%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.525634606457572"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/sequence/94.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/7.instance--/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink/94.instance": "M766,347L820.5,346.5",
						"/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink/94.instance--/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance": "M820.5748623643947,346.49931318931743L874.9997249389781,346.00000252349565"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink"
			},
			"95": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "sequenceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1380.6499997096823,
						349.50542167625355
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;41.49412309977788,99.93474240685578%",
										"0;-2.502824426339828,3.6120991231393367%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;2.070030653041082"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/DelTa/DelTa/sequence/95.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/DelTa/DelTa.defaultIcons/RuleIcon/8.instance--/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink/95.instance": "M1339,348L1380.6499997096823,349.50542167625355",
						"/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink/95.instance--/Formalisms/DelTa/DelTa.defaultIcons/EndIcon/52.instance": "M1380.5748192410804,349.5027043099186L1421.9996388445347,350.99998694618796"
					}
				},
				"$type": "/Formalisms/DelTa/DelTa.defaultIcons/sequenceLink"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/DelTa/DelTa.defaultIcons"
		]
	},
	"asm": {
		"nodes": {
			"5": {
				"name": {
					"type": "string",
					"value": "Top-down\nPhased Construction\n(src,trgt)"
				},
				"$type": "/Formalisms/DelTa/DelTa/ModelTransformationDesignPattern"
			},
			"6": {
				"name": {
					"type": "string",
					"value": "N_"
				},
				"isExhaustive": {
					"type": "int",
					"value": "0"
				},
				"$type": "/Formalisms/DelTa/DelTa/Start"
			},
			"7": {
				"name": {
					"type": "string",
					"value": "formerPhase"
				},
				"isExhaustive": {
					"type": "int",
					"value": "0"
				},
				"$type": "/Formalisms/DelTa/DelTa/Rule"
			},
			"8": {
				"name": {
					"type": "string",
					"value": "latterPhase"
				},
				"isExhaustive": {
					"type": "int",
					"value": "0"
				},
				"$type": "/Formalisms/DelTa/DelTa/Rule"
			},
			"52": {
				"name": {
					"type": "string",
					"value": "N_"
				},
				"isExhaustive": {
					"type": "int",
					"value": "0"
				},
				"$type": "/Formalisms/DelTa/DelTa/End"
			},
			"54": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "sSuper"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "src"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": "-1"
				},
				"$type": "/Formalisms/DelTa/DelTa/Entity"
			},
			"55": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Action"
				},
				"name": {
					"type": "string",
					"value": "tSuper"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "trgt"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": 0
				},
				"$type": "/Formalisms/DelTa/DelTa/Entity"
			},
			"56": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Action"
				},
				"name": {
					"type": "string",
					"value": "Var"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "mm"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": 0
				},
				"$type": "/Formalisms/DelTa/DelTa/Trace"
			},
			"57": {
				"$type": "/Formalisms/DelTa/DelTa/trSource"
			},
			"58": {
				"$type": "/Formalisms/DelTa/DelTa/trTarget"
			},
			"59": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "sSub"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "src"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": "-1"
				},
				"$type": "/Formalisms/DelTa/DelTa/Entity"
			},
			"60": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "Var"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "mm"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": "-1"
				},
				"$type": "/Formalisms/DelTa/DelTa/Relation"
			},
			"61": {
				"$type": "/Formalisms/DelTa/DelTa/relSource"
			},
			"62": {
				"$type": "/Formalisms/DelTa/DelTa/relTarget"
			},
			"64": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"65": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"66": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"67": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"68": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"69": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "sSuper"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "src"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": "-1"
				},
				"$type": "/Formalisms/DelTa/DelTa/Entity"
			},
			"70": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "tSuper"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "trgt"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": -1
				},
				"$type": "/Formalisms/DelTa/DelTa/Entity"
			},
			"71": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "Var"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "mm"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": -1
				},
				"$type": "/Formalisms/DelTa/DelTa/Trace"
			},
			"72": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "sSub"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "src"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": "-1"
				},
				"$type": "/Formalisms/DelTa/DelTa/Entity"
			},
			"73": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Constraint"
				},
				"name": {
					"type": "string",
					"value": "Var"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "mm"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": "-1"
				},
				"$type": "/Formalisms/DelTa/DelTa/Relation"
			},
			"74": {
				"$type": "/Formalisms/DelTa/DelTa/relTarget"
			},
			"75": {
				"$type": "/Formalisms/DelTa/DelTa/relSource"
			},
			"76": {
				"$type": "/Formalisms/DelTa/DelTa/trTarget"
			},
			"77": {
				"$type": "/Formalisms/DelTa/DelTa/trSource"
			},
			"78": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Action"
				},
				"name": {
					"type": "string",
					"value": "tSub"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "trgt"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": 0
				},
				"$type": "/Formalisms/DelTa/DelTa/Entity"
			},
			"79": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Action"
				},
				"name": {
					"type": "string",
					"value": "Var"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "mm"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": 0
				},
				"$type": "/Formalisms/DelTa/DelTa/Trace"
			},
			"80": {
				"$type": "/Formalisms/DelTa/DelTa/trSource"
			},
			"81": {
				"$type": "/Formalisms/DelTa/DelTa/trTarget"
			},
			"82": {
				"varType": {
					"type": "ENUM(Action,Constraint)",
					"value": "Action"
				},
				"name": {
					"type": "string",
					"value": "Var"
				},
				"exists": {
					"type": "int",
					"value": "1"
				},
				"mm": {
					"type": "string",
					"value": "mm"
				},
				"negativeConstraintNumber": {
					"type": "int",
					"value": 0
				},
				"$type": "/Formalisms/DelTa/DelTa/Relation"
			},
			"83": {
				"$type": "/Formalisms/DelTa/DelTa/relSource"
			},
			"84": {
				"$type": "/Formalisms/DelTa/DelTa/relTarget"
			},
			"85": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"86": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"87": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"88": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"89": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"90": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"91": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"92": {
				"$type": "/Formalisms/DelTa/DelTa/operatesOn"
			},
			"93": {
				"$type": "/Formalisms/DelTa/DelTa/sequence"
			},
			"94": {
				"$type": "/Formalisms/DelTa/DelTa/sequence"
			},
			"95": {
				"$type": "/Formalisms/DelTa/DelTa/sequence"
			}
		},
		"edges": [
			{
				"src": "56",
				"dest": "57"
			},
			{
				"src": "57",
				"dest": "54"
			},
			{
				"src": "56",
				"dest": "58"
			},
			{
				"src": "58",
				"dest": "55"
			},
			{
				"src": "60",
				"dest": "61"
			},
			{
				"src": "61",
				"dest": "54"
			},
			{
				"src": "60",
				"dest": "62"
			},
			{
				"src": "62",
				"dest": "59"
			},
			{
				"src": "7",
				"dest": "64"
			},
			{
				"src": "64",
				"dest": "54"
			},
			{
				"src": "7",
				"dest": "65"
			},
			{
				"src": "65",
				"dest": "55"
			},
			{
				"src": "7",
				"dest": "66"
			},
			{
				"src": "66",
				"dest": "56"
			},
			{
				"src": "7",
				"dest": "67"
			},
			{
				"src": "67",
				"dest": "59"
			},
			{
				"src": "7",
				"dest": "68"
			},
			{
				"src": "68",
				"dest": "60"
			},
			{
				"src": "73",
				"dest": "74"
			},
			{
				"src": "74",
				"dest": "72"
			},
			{
				"src": "73",
				"dest": "75"
			},
			{
				"src": "75",
				"dest": "69"
			},
			{
				"src": "71",
				"dest": "76"
			},
			{
				"src": "76",
				"dest": "70"
			},
			{
				"src": "71",
				"dest": "77"
			},
			{
				"src": "77",
				"dest": "69"
			},
			{
				"src": "79",
				"dest": "80"
			},
			{
				"src": "80",
				"dest": "72"
			},
			{
				"src": "79",
				"dest": "81"
			},
			{
				"src": "81",
				"dest": "78"
			},
			{
				"src": "82",
				"dest": "83"
			},
			{
				"src": "83",
				"dest": "70"
			},
			{
				"src": "82",
				"dest": "84"
			},
			{
				"src": "84",
				"dest": "78"
			},
			{
				"src": "8",
				"dest": "85"
			},
			{
				"src": "85",
				"dest": "69"
			},
			{
				"src": "8",
				"dest": "86"
			},
			{
				"src": "86",
				"dest": "70"
			},
			{
				"src": "8",
				"dest": "87"
			},
			{
				"src": "87",
				"dest": "71"
			},
			{
				"src": "8",
				"dest": "88"
			},
			{
				"src": "88",
				"dest": "72"
			},
			{
				"src": "8",
				"dest": "89"
			},
			{
				"src": "89",
				"dest": "73"
			},
			{
				"src": "8",
				"dest": "90"
			},
			{
				"src": "90",
				"dest": "78"
			},
			{
				"src": "8",
				"dest": "91"
			},
			{
				"src": "91",
				"dest": "79"
			},
			{
				"src": "8",
				"dest": "92"
			},
			{
				"src": "92",
				"dest": "82"
			},
			{
				"src": "6",
				"dest": "93"
			},
			{
				"src": "93",
				"dest": "7"
			},
			{
				"src": "7",
				"dest": "94"
			},
			{
				"src": "94",
				"dest": "8"
			},
			{
				"src": "8",
				"dest": "95"
			},
			{
				"src": "95",
				"dest": "52"
			}
		],
		"metamodels": [
			"/Formalisms/DelTa/DelTa"
		]
	}
}