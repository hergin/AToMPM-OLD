{
	"csm": {
		"nodes": {
			"0": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						732,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "TransformationUnit"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "italic",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": "+ name : string = N_\n+ isExhaustive : int = 0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/0.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"1": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						777,
						594
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "PseudoUnit"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "italic",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/1.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"2": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "InheritanceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						760,
						431.88725245541843
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"164": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,10 l-20,10 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#ffffff",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-10,6.123031769111886e-15%",
										"0;-79.8863644444445,-100%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-90"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -10
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance/2.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/1.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/2.instance": "M785,668L764,667L760,431.88725245541843",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/2.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance": "M760,431.9595684331725L760,352.00088801097394"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink"
			},
			"3": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						801,
						767
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "Start"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/3.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"4": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1030,
						766
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "End"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/4.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"5": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "InheritanceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						827.5,
						750.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"164": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,10 l-20,10 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#ffffff",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-9.498470642911002,1.7541160386139378%",
										"0;-28.674885903645986,-99.98461420100134%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-88.99491399474589"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -10
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance/5.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/3.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/5.instance": "M827,779L827.5,750.5",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/5.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/1.instance": "M827.5013111713328,750.4252632340343L827.9999907771892,722.0005257002155"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink"
			},
			"6": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "InheritanceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						969.6499999247243,
						748.0000000000001
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"164": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,10 l-20,10 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#ffffff",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-92.64261167103746,-3.8433122101204344%",
										"0;-25.615668778988038,-99.92611746313142%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-92.2025981617658"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -10
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance/6.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/4.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/6.instance": "M1062,772L1063,749L969.6499999247243,748.0000000000001",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/6.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/1.instance": "M969.6499999247243,748.0000000000001L888,748L887,722"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink"
			},
			"7": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						175,
						222
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "TransformationUnitRelation"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "italic",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/7.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"8": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						201,
						375
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "Decision"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/8.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"10": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						202,
						670
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "Random"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/10.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"11": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "InheritanceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						190,
						409.9773242630386
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"164": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,10 l-20,10 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#ffffff",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-10.000000000000028,-1.6081428723391245e-14%",
										"0;-59.977038730158824,-100%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-90.00000000000001"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -10
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance/11.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/8.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/11.instance": "M205,455L190,455L190,409.9773242630386",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/11.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/7.instance": "M190.00000000000003,409.9660332243697L189.99999999999997,350.0002855328798"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink"
			},
			"13": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "InheritanceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						186.94845780944823,
						550.8961005859376
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"164": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,10 l-20,10 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#ffffff",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-8.948325838729119,0.5208262692228643%",
										"0;-201.94748045407079,-99.99864369078857%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-89.70158718000512"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -10
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance/13.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/10.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/13.instance": "M206,733L186,733L186.94845780944823,550.8961005859376",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/13.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/7.instance": "M186.94810727482806,550.9634032330025L187.99999633979797,349.00070275878903"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink"
			},
			"16": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "AssociationLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						516.2250604780844,
						275.0523186682521
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"71": {
								"textContent": {
									"type": "string",
									"value": "success"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-29.06106642453028,0%",
										"0;59.380505564244174,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-89.45986942560613"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.3803680981595092,
										"yoffset": -28.5
									}
								}
							},
							"74": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('>'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'in') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-82.37642914773528,0%",
										"0;105.18436734968844,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.5208563745019587"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.06134969325153374,
										"yoffset": -25.5
									}
								}
							},
							"77": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('<'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'out') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;218.88218643088317,99.99894791661184%",
										"0;-38.55207395215149,0.4587107702596949%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0.26282283323652583"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1.0245398773006136,
										"yoffset": -23.5
									}
								}
							},
							"140": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,8 l-20,8"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;218.81108626149285,99.99894791661184%",
										"0;-23.052237025076636,0.4587107702596949%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0.26282283323652583"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -8
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association/16.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/8.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/16.instance": "M405,406L515,405L516.2250604780844,275.0523186682521",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/16.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance": "M516.2250604780844,275.0523186682521L517,259L734.9994498779565,259.9999974765044"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink"
			},
			"17": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "AssociationLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						537.456173059002,
						313.42745322235436
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"71": {
								"textContent": {
									"type": "string",
									"value": "fail"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-29.28538961284187,0%",
										"0;56.744204554484384,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-89.20976349757082"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.3803680981595092,
										"yoffset": -28.5
									}
								}
							},
							"74": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('>'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'in') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-105.5759742550049,0%",
										"0;81.63537508907979,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.8615257345672586"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.06134969325153374,
										"yoffset": -25.5
									}
								}
							},
							"77": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('<'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'out') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;199.89745543650508,99.98863858710853%",
										"0;-59.924792374913466,1.5073664108609375%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0.8636900445995898"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1.0245398773006136,
										"yoffset": -23.5
									}
								}
							},
							"140": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,8 l-20,8"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;199.66381364282165,99.98863858710853%",
										"0;-44.42655339391166,1.5073664108609375%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0.8636900445995898"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -8
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association/17.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/8.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/17.instance": "M403,421L536,419L537.456173059002,313.42745322235436",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/17.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance": "M537.456173059002,313.42745322235436L538,274L736.9993973889548,276.9999909154114"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink"
			},
			"19": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "AssociationLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						655.263989256084,
						595.4918463219
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"71": {
								"textContent": {
									"type": "string",
									"value": "randomizedUnits"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-28.731495908188094,0%",
										"0;82.83573073977652,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-89.83995633939408"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.3803680981595092,
										"yoffset": -28.5
									}
								}
							},
							"74": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('>'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'in') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-209.54669621792038,0%",
										"0;67.34637672695226,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0.454718861693143"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.06134969325153374,
										"yoffset": -25.5
									}
								}
							},
							"77": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('<'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'out') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;83.45253760570358,99.99274284261898%",
										"0;-287.9901365386448,-1.204731841477343%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.6902771978650818"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1.0245398773006136,
										"yoffset": -23.5
									}
								}
							},
							"140": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,8 l-20,8"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;83.63927104113259,99.99274284261898%",
										"0;-272.49126139803883,-1.204731841477343%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.6902771978650818"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -8
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association/19.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/10.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/19.instance": "M403,688L655,690L655.263989256084,595.4918463219",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/19.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance": "M655.263989256084,595.4918463219L656,332L738.9996388445347,331.00000435127066"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink"
			},
			"20": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						775,
						416
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"96": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"97": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"98": {
								"textContent": {
									"type": "string",
									"value": "Rule"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"99": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'];\n                if (attr['default'])\n                    s += ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"100": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"101": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"102": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "96",
								"dest": "100"
							},
							{
								"src": "100",
								"dest": "98"
							},
							{
								"src": "96",
								"dest": "101"
							},
							{
								"src": "101",
								"dest": "99"
							},
							{
								"src": "96",
								"dest": "102"
							},
							{
								"src": "102",
								"dest": "97"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class/20.instance"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon"
			},
			"21": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "InheritanceLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						760,
						420.41640056436444
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"164": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,10 l-20,10 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#ffffff",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-10,6.123031769111886e-15%",
										"0;-70.41541803278693,-100%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-90"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -10
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance/21.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/20.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/21.instance": "M779,471L760,472L760,420.41640056436444",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink/21.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance": "M760,420.4772280342487L760,350.0009825315775"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/InheritanceLink"
			},
			"23": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "AssociationLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						498.0208523777047,
						239.85802142860976
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"71": {
								"textContent": {
									"type": "string",
									"value": "condition"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-40.20364824614552,0%",
										"0;46.23485234101318,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-90.39513704250749"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.3803680981595092,
										"yoffset": -28.5
									}
								}
							},
							"74": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('>'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'in') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-66.32633140061313,0%",
										"0;119.64197857139027,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.06134969325153374,
										"yoffset": -25.5
									}
								}
							},
							"77": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('<'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'out') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;241.70113573199035,99.99302571572744%",
										"0;-26.356376894723667,-1.1810199887684114%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.6766903402793154"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1.0245398773006136,
										"yoffset": -23.5
									}
								}
							},
							"140": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,8 l-20,8"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;241.88419383024944,99.99302571572744%",
										"0;-10.857457908785904,-1.1810199887684114%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.6766903402793154"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -8
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association/23.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/8.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/23.instance": "M402,385L487,385L486,240L498.0208523777047,239.85802142860976",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/23.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance": "M498.0713475157072,239.857425029342L739.9995278070556,237.00000557708205"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink"
			},
			"24": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "AssociationLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1043.5685574363426,
						246.6453784722222
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"71": {
								"textContent": {
									"type": "string",
									"value": "sequence"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-15.890299648908922,0%",
										"0;-42.145378472222205,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.3803680981595092,
										"yoffset": -28.5
									}
								}
							},
							"74": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('>'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'in') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-92.78174166417591,0%",
										"0;-39.145378472222205,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.06134969325153374,
										"yoffset": -25.5
									}
								}
							},
							"77": {
								"textContent": {
									"type": "string",
									"value": "*"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "20px",
										"font-style": "normal",
										"font-weight": "normal",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none",
										"font-family": "Sans"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar clazz = getNeighbors('<'),\n    mult = '';\nif (clazz.length > 0) {\n    clazz = clazz[0];\n    var cardinalities = getAttr('cardinalities', clazz), card;\n    for (i = 0; i < cardinalities.length; i++) {\n        if (cardinalities[i]['type'] == getAttr('name') && cardinalities[i]['dir'] == 'out') {\n            card = cardinalities[i];\n            break;\n        }\n    }\n    if (card) {\n        var min = card['min'],\n            max = card['max'];\n        if (min == '')\n            min = '0';\n        if (max == '' || max == 'Infinity')\n            max = '*';\n        if (min == '0' && max == '*')\n            mult = '*';\n        else if (min == max)\n            mult = max;\n        else mult = min + '..' + max;\n    }\n}\nif (mult == '')\n    mult = '*';\n({'textContent': mult})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-109.7819124105938,-99.99586802470745%",
										"0;32.85365299142023,-0.9090533456792206%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-179.479143625498"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1.0245398773006136,
										"yoffset": -23.5
									}
								}
							},
							"140": {
								"segments": {
									"type": "string",
									"value": "m0,0 l20,8 l-20,8"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-109.64100914201367,-99.99586802470745%",
										"0;17.354293447590578,-0.9090533456792206%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-179.479143625498"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -8
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association/24.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/24.instance": "M936,233L1043,233L1043.5685574363426,246.6453784722222",
						"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink/24.instance--/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/ClassIcon/0.instance": "M1043.5685574363426,246.6453784722222L1044,257L934.0002725619834,256.0000024778362"
					}
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons/AssociationLink"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram.umlIcons"
		]
	},
	"asm": {
		"nodes": {
			"0": {
				"name": {
					"type": "string",
					"value": "TransformationUnit"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": [
						{
							"name": "name",
							"type": "string",
							"default": "N_"
						},
						{
							"name": "isExhaustive",
							"type": "int",
							"default": "0"
						}
					]
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": true
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"1": {
				"name": {
					"type": "string",
					"value": "PseudoUnit"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": true
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"2": {
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance"
			},
			"3": {
				"name": {
					"type": "string",
					"value": "Start"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": false
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"4": {
				"name": {
					"type": "string",
					"value": "End"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": false
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"5": {
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance"
			},
			"6": {
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance"
			},
			"7": {
				"name": {
					"type": "string",
					"value": "TransformationUnitRelation"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": true
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"8": {
				"name": {
					"type": "string",
					"value": "Decision"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": false
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"10": {
				"name": {
					"type": "string",
					"value": "Random"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": false
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"11": {
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance"
			},
			"13": {
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance"
			},
			"16": {
				"name": {
					"type": "string",
					"value": "success"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"linktype": {
					"type": "ENUM(visual,containment)",
					"value": "visual"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association"
			},
			"17": {
				"name": {
					"type": "string",
					"value": "fail"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"linktype": {
					"type": "ENUM(visual,containment)",
					"value": "visual"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association"
			},
			"19": {
				"name": {
					"type": "string",
					"value": "randomizedUnits"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"linktype": {
					"type": "ENUM(visual,containment)",
					"value": "containment"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association"
			},
			"20": {
				"name": {
					"type": "string",
					"value": "Rule"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": false
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Class"
			},
			"21": {
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Inheritance"
			},
			"23": {
				"name": {
					"type": "string",
					"value": "condition"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"linktype": {
					"type": "ENUM(visual,containment)",
					"value": "visual"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association"
			},
			"24": {
				"name": {
					"type": "string",
					"value": "sequence"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"constraints": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"actions": {
					"type": "list<$EVENT_HANDLER>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"linktype": {
					"type": "ENUM(visual,containment)",
					"value": "visual"
				},
				"$type": "/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram/Association"
			}
		},
		"edges": [
			{
				"src": "1",
				"dest": "2"
			},
			{
				"src": "2",
				"dest": "0"
			},
			{
				"src": "3",
				"dest": "5"
			},
			{
				"src": "5",
				"dest": "1"
			},
			{
				"src": "4",
				"dest": "6"
			},
			{
				"src": "6",
				"dest": "1"
			},
			{
				"src": "8",
				"dest": "11"
			},
			{
				"src": "11",
				"dest": "7"
			},
			{
				"src": "10",
				"dest": "13"
			},
			{
				"src": "13",
				"dest": "7"
			},
			{
				"src": "8",
				"dest": "16"
			},
			{
				"src": "16",
				"dest": "0"
			},
			{
				"src": "8",
				"dest": "17"
			},
			{
				"src": "17",
				"dest": "0"
			},
			{
				"src": "10",
				"dest": "19"
			},
			{
				"src": "19",
				"dest": "0"
			},
			{
				"src": "20",
				"dest": "21"
			},
			{
				"src": "21",
				"dest": "0"
			},
			{
				"src": "8",
				"dest": "23"
			},
			{
				"src": "23",
				"dest": "0"
			},
			{
				"src": "0",
				"dest": "24"
			},
			{
				"src": "24",
				"dest": "0"
			}
		],
		"metamodels": [
			"/Formalisms/__LanguageSyntax__/SimpleClassDiagram/SimpleClassDiagram"
		]
	}
}