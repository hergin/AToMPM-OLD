{
	"types": {
		"StartIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "StartIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					58,
					115
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"1": {
							"r": {
								"type": "double",
								"value": 15
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
							"position": {
								"type": "list<double>",
								"value": [
									5,
									4
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		],
		"EndIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "EndIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					1538,
					248
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"4": {
							"r": {
								"type": "double",
								"value": 17
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
							"position": {
								"type": "list<double>",
								"value": [
									5,
									4
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"5": {
							"r": {
								"type": "double",
								"value": 15
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#ffffff",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
							"position": {
								"type": "list<double>",
								"value": [
									7,
									6
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		],
		"RuleIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "RuleIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					533,
					166
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "({position:getAttr(\"position\")})"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "({position:getAttr(\"position\")})"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"10": {
							"width": {
								"type": "double",
								"value": 350
							},
							"height": {
								"type": "double",
								"value": 200
							},
							"cornerRadius": {
								"type": "double",
								"value": 0
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
							"position": {
								"type": "list<double>",
								"value": [
									42,
									32
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"11": {
							"width": {
								"type": "double",
								"value": 200
							},
							"height": {
								"type": "double",
								"value": 40
							},
							"cornerRadius": {
								"type": "double",
								"value": 0
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 1,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none",
									"": ""
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
							"position": {
								"type": "list<double>",
								"value": [
									35,
									26
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"24": {
							"textContent": {
								"type": "string",
								"value": "Rule..."
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('name').length>15)\n     ({'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse\n     ({'textContent':getAttr('name')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									45,
									36
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"25": {
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
							"position": {
								"type": "list<double>",
								"value": [
									47.22265625,
									37
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"link-style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#00ffff",
									"stroke-dasharray": "",
									"stroke-opacity": 0.1,
									"stroke-width": 1
								}
							}
						},
						"29": {
							"src": {
								"type": "string",
								"value": "/Formalisms/DelTa/icons/isExhaustive.svg"
							},
							"width": {
								"type": "double",
								"value": 40
							},
							"height": {
								"type": "double",
								"value": 40
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('isExhaustive')!=0)\n     ({'width':40,'height':40})\nelse\n     ({'width':0,'height':0})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
							"position": {
								"type": "list<double>",
								"value": [
									12,
									4
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						}
					},
					"edges": [
						{
							"src": "11",
							"dest": "25"
						},
						{
							"src": "25",
							"dest": "24"
						}
					]
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		],
		"conditionLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": "",
					"stroke-opacity": 1,
					"stroke-width": 2
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "conditionLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					73,
					513
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"288": {
							"segments": {
								"type": "string",
								"value": "m0,0 l-10,4 l10,4 l-3,-4 z"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"fill": "#000000",
									"opacity": 1,
									"stroke-width": 1
								}
							},
							"mapper": {
								"type": "code",
								"value": ""
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": -1,
									"yoffset": -4
								}
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"successLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": "",
					"stroke-opacity": 1,
					"stroke-width": 2
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "successLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					335,
					515
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"22": {
							"textContent": {
								"type": "string",
								"value": "success"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "16px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 0.06134969325153374,
									"yoffset": -27.5
								}
							}
						},
						"267": {
							"segments": {
								"type": "string",
								"value": "m0,0 l10,4 l-10,4 l3,-4 z"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"fill": "#000000",
									"opacity": 1,
									"stroke-width": 1
								}
							},
							"mapper": {
								"type": "code",
								"value": ""
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 1,
									"yoffset": -4
								}
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"failLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": "",
					"stroke-opacity": 1,
					"stroke-width": 2
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "failLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					600,
					519
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"20": {
							"textContent": {
								"type": "string",
								"value": "fail"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "16px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 0.06134969325153374,
									"yoffset": -25.5
								}
							}
						},
						"267": {
							"segments": {
								"type": "string",
								"value": "m0,0 l10,4 l-10,4 l3,-4 z"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"fill": "#000000",
									"opacity": 1,
									"stroke-width": 1
								}
							},
							"mapper": {
								"type": "code",
								"value": ""
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 1,
									"yoffset": -4
								}
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"DecisionIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "DecisionIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					1038,
					211
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"18": {
							"r": {
								"type": "double",
								"value": 25
							},
							"sides": {
								"type": "int",
								"value": 3
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
							"position": {
								"type": "list<double>",
								"value": [
									6,
									8
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		],
		"sequenceLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": "",
					"stroke-opacity": 1,
					"stroke-width": 2
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "sequenceLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					869,
					523
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"267": {
							"segments": {
								"type": "string",
								"value": "m0,0 l10,4 l-10,4 l3,-4 z"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"fill": "#000000",
									"opacity": 1,
									"stroke-width": 1
								}
							},
							"mapper": {
								"type": "code",
								"value": ""
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 1,
									"yoffset": -4
								}
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"RandomIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "RandomIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					1290,
					229
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"34": {
							"width": {
								"type": "double",
								"value": 100
							},
							"height": {
								"type": "double",
								"value": 100
							},
							"cornerRadius": {
								"type": "double",
								"value": 15
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "-",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
							"position": {
								"type": "list<double>",
								"value": [
									6,
									4
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		],
		"randomizedUnitsLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": "",
					"stroke-opacity": 1,
					"stroke-width": 0
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "randomizedUnitsLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					1141,
					524
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"ModelTransformationDesignPatternIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "ModelTransformationDesignPatternIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					288,
					139
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"38": {
							"textContent": {
								"type": "string",
								"value": "MTDP"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"text-anchor": "middle",
									"font-size": "20px",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "({'textContent':getAttr('name')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									34,
									6
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		],
		"EntityIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "EntityIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					1795,
					285
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"41": {
							"width": {
								"type": "double",
								"value": 150
							},
							"height": {
								"type": "double",
								"value": 75
							},
							"cornerRadius": {
								"type": "double",
								"value": 0
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('varType')=='Delete')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Read')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Create')\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
							"position": {
								"type": "list<double>",
								"value": [
									7,
									4
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"42": {
							"segments": {
								"type": "string",
								"value": "m0,0l57,0"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('varType')=='Delete')\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									100,
									29.714299999999753
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"47": {
							"segments": {
								"type": "string",
								"value": "m-10,-10l25,25"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1.5,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('varType')=='Delete')\n     ({'style':{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n     ({'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									86,
									15.142799999999852
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"49": {
							"textContent": {
								"type": "string",
								"value": "mm"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"text-anchor": "end",
									"font-size": "15px",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('mm').length>10 && getAttr('varType')=='Delete')\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length>10 && getAttr('varType')!='Delete')\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm').substring(0,15)+\"...\"})\nelse if(getAttr('mm').length<=10 && getAttr('varType')=='Delete')\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})\nelse if(getAttr('mm').length<=10 && getAttr('varType')!='Delete')\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"end\",\"font-size\": \"15px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('mm')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									152,
									10.285699999999792
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"53": {
							"textContent": {
								"type": "string",
								"value": "entity"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"text-anchor": "middle",
									"font-size": "20px",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('name').length>15 && getAttr('varType')=='Delete')\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length>15 && getAttr('varType')!='Delete')\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name').substring(0,15)+\"...\"})\nelse if(getAttr('name').length<=15 && getAttr('varType')=='Delete')\n     ({\"style\":{\"stroke\": \"#ffffff\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})\nelse if(getAttr('name').length<=15 && getAttr('varType')!='Delete')\n     ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"middle\",\"font-size\": \"20px\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},'textContent':getAttr('name')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									83,
									44
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"65": {
							"textContent": {
								"type": "string",
								"value": "n0"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"text-anchor": "start",
									"font-size": "15px",
									"font-style": "italic",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('varType')!='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('varType')=='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('varType')!='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('varType')=='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									12,
									9.285699999999792
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"66": {
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
							"position": {
								"type": "list<double>",
								"value": [
									31.5,
									27.392849999999896
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"link-style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#00ffff",
									"stroke-dasharray": "",
									"stroke-opacity": 0.1,
									"stroke-width": 1
								}
							}
						}
					},
					"edges": [
						{
							"src": "41",
							"dest": "66"
						},
						{
							"src": "66",
							"dest": "65"
						}
					]
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		],
		"traceLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": ". ",
					"stroke-opacity": 1,
					"stroke-width": 2
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "traceLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					1688,
					520
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"103": {
							"width": {
								"type": "double",
								"value": 25
							},
							"height": {
								"type": "double",
								"value": 25
							},
							"cornerRadius": {
								"type": "double",
								"value": 5
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('varType')=='Delete' && getAttr('negativeConstraintNumber')!=-1)\n     ({'width':25,'height':25,'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Read' && getAttr('negativeConstraintNumber')!=-1)\n     ({'width':25,'height':25,'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Create' && getAttr('negativeConstraintNumber')!=-1)\n     ({'width':25,'height':25,'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n    ({'width':0,'height':0})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 0.4662576687116564,
									"yoffset": -15.5
								}
							}
						},
						"104": {
							"textContent": {
								"type": "string",
								"value": "n0"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"text-anchor": "start",
									"font-size": "15px",
									"font-style": "italic",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('varType')!='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('varType')=='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('varType')!='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('varType')=='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 0.4785276073619632,
									"yoffset": -9.214300000000208
								}
							}
						},
						"267": {
							"segments": {
								"type": "string",
								"value": "m0,0 l10,4 l-10,4 l3,-4 z"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"fill": "#000000",
									"opacity": 1,
									"stroke-width": 1
								}
							},
							"mapper": {
								"type": "code",
								"value": ""
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 1,
									"yoffset": -4
								}
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"relationLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": "",
					"stroke-opacity": 1,
					"stroke-width": 2
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "relationLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					2222,
					519
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"85": {
							"width": {
								"type": "double",
								"value": 25
							},
							"height": {
								"type": "double",
								"value": 25
							},
							"cornerRadius": {
								"type": "double",
								"value": 5
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('varType')=='Delete' && getAttr('negativeConstraintNumber')!=-1)\n     ({'width':25,'height':25,'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Read' && getAttr('negativeConstraintNumber')!=-1)\n     ({'width':25,'height':25,'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse if(getAttr('varType')=='Create' && getAttr('negativeConstraintNumber')!=-1)\n     ({'width':25,'height':25,'style':{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"gray\",\"fill-opacity\": 0.95,\"font-size\": \"20px\",\"stroke-width\": 1,\"arrow-start\": \"none\",\"arrow-end\": \"none\"}})\nelse\n    ({'width':0,'height':0})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 0.5153374233128835,
									"yoffset": -15.5
								}
							}
						},
						"86": {
							"textContent": {
								"type": "string",
								"value": "n0"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"text-anchor": "start",
									"font-size": "15px",
									"font-style": "italic",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "if(getAttr('negativeConstraintNumber')!=-1 && getAttr('varType')!='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')!=-1 && getAttr('varType')=='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"15px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('varType')!='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#000000\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})\nelse if(getAttr('negativeConstraintNumber')==-1 && getAttr('varType')=='Delete')\n    ({\"style\":{\"stroke\": \"#000000\",\"stroke-dasharray\": \"\",\"fill\": \"#ffffff\",\"fill-opacity\": 0.75,\"text-anchor\": \"start\",\"font-size\": \"0px\",\"font-style\": \"italic\",\"stroke-width\": 0,\"arrow-start\": \"none\",\"arrow-end\": \"none\"},\"textContent\":\"n\"+getAttr('negativeConstraintNumber')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 0.5214723926380368,
									"yoffset": -9.214300000000208
								}
							}
						},
						"267": {
							"segments": {
								"type": "string",
								"value": "m0,0 l10,4 l-10,4 l3,-4 z"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"fill": "#000000",
									"opacity": 1,
									"stroke-width": 1
								}
							},
							"mapper": {
								"type": "code",
								"value": ""
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									0,
									0
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							},
							"$linkDecoratorInfo": {
								"type": "map<string,double>",
								"value": {
									"xratio": 1,
									"yoffset": -4
								}
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"operatesOnLink": [
			{
				"name": "link-style",
				"type": "map<string,string>",
				"default": {
					"stroke": "#000000",
					"stroke-dasharray": "",
					"stroke-opacity": 1,
					"stroke-width": 0
				}
			},
			{
				"name": "arrowHead",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "custom"
			},
			{
				"name": "arrowTail",
				"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
				"default": "arrow-black"
			},
			{
				"name": "typename",
				"type": "string",
				"default": "operatesOnLink"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					2490,
					518
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			},
			{
				"name": "$segments",
				"type": "map<string,list<string>>",
				"default": {}
			}
		],
		"MetaDataIcon": [
			{
				"name": "typename",
				"type": "string",
				"default": "MetaDataIcon"
			},
			{
				"name": "position",
				"type": "list<double>",
				"default": [
					2024,
					318
				]
			},
			{
				"name": "orientation",
				"type": "double",
				"default": 0
			},
			{
				"name": "scale",
				"type": "list<double>",
				"default": [
					1,
					1
				]
			},
			{
				"name": "mapper",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
			},
			{
				"name": "parser",
				"type": "code",
				"default": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
			},
			{
				"name": "$contents",
				"type": "map<string,*>",
				"default": {
					"nodes": {
						"108": {
							"textContent": {
								"type": "string",
								"value": "MetaData"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									7,
									6
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"110": {
							"segments": {
								"type": "string",
								"value": "m0,0l100,0"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#ffffff",
									"fill-opacity": 0.75,
									"font-size": "20px",
									"stroke-width": 1,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
							"position": {
								"type": "list<double>",
								"value": [
									8,
									30
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						},
						"112": {
							"textContent": {
								"type": "string",
								"value": "location"
							},
							"style": {
								"type": "map<string,string>",
								"value": {
									"stroke": "#000000",
									"stroke-dasharray": "",
									"fill": "#000000",
									"fill-opacity": 0.75,
									"font-size": "17px",
									"stroke-width": 0,
									"arrow-start": "none",
									"arrow-end": "none"
								}
							},
							"mapper": {
								"type": "code",
								"value": "({'textContent': 'Loc: '+getAttr('location')})"
							},
							"parser": {
								"type": "code",
								"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
							},
							"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
							"position": {
								"type": "list<double>",
								"value": [
									9,
									37
								]
							},
							"orientation": {
								"type": "double",
								"value": 0
							},
							"scale": {
								"type": "list<double>",
								"value": [
									1,
									1
								]
							}
						}
					},
					"edges": []
				}
			},
			{
				"name": "$asuri",
				"type": "string",
				"default": "-1"
			}
		]
	},
	"constraints": [],
	"actions": [],
	"cardinalities": {
		"StartIcon": [],
		"EndIcon": [],
		"RuleIcon": [],
		"conditionLink": [],
		"successLink": [],
		"failLink": [],
		"DecisionIcon": [],
		"sequenceLink": [],
		"RandomIcon": [],
		"randomizedUnitsLink": [],
		"ModelTransformationDesignPatternIcon": [],
		"EntityIcon": [],
		"traceLink": [],
		"relationLink": [],
		"operatesOnLink": [],
		"MetaDataIcon": []
	},
	"legalConnections": {},
	"connectorTypes": {},
	"types2parentTypes": {
		"StartIcon": [],
		"EndIcon": [],
		"RuleIcon": [],
		"conditionLink": [],
		"successLink": [],
		"failLink": [],
		"DecisionIcon": [],
		"sequenceLink": [],
		"RandomIcon": [],
		"randomizedUnitsLink": [],
		"ModelTransformationDesignPatternIcon": [],
		"EntityIcon": [],
		"traceLink": [],
		"relationLink": [],
		"operatesOnLink": [],
		"MetaDataIcon": []
	}
}